package com.vikings.util;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vikings.dao.mapper.DataImportMapper;
import com.vikings.domain.Album;
import com.vikings.domain.Artist;
import com.vikings.domain.Song;
import com.vikings.domain.identifier.AlbumIdentifier;
import com.vikings.domain.identifier.ArtistIdentifier;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

/**
 * Imports artist/album/song data from JSONs
 * to the database.
 * 
 * JSONs generated by python script.
 * Put the JSONs in
 * src/main/resources/com/vikings/util
 */
@Controller
public class DataImport {
    
    @Autowired
    DataImportMapper dataImportMapper;
    
    // start app and visit this URL to run the import
    @GetMapping("/util/runDataImport")
    public String runDataImport(Model model) {
        System.out.println("RUNNING ARTISTS PART 1");
        createArtists("artists1.json");
        System.out.println("RUNNING ARTISTS PART 2");
        createArtists("artists2.json");
        System.out.println("RUNNING ARTISTS PART 3");
        createArtists("artists3.json");
        System.out.println("RUNNING ALBUMS PART 1");
        createAlbums("albums1.json");
        System.out.println("RUNNING ALBUMS PART 2");
        createAlbums("albums2.json");
        System.out.println("RUNNING ALBUMS PART 3");
        createAlbums("albums3.json");
        System.out.println("RUNNING SONGS PART 1");
        createSongs("songs1.json");
        System.out.println("RUNNING SONGS PART 2");
        createSongs("songs2.json");
        System.out.println("RUNNING SONGS PART 3");
        createSongs("songs3.json");
        System.out.println("DATA IMPORT DONE.");
        return "index";
    }
    
    private void createArtists(String filename) {
        try {
            File artistFile = new File(getClass().getResource(filename).getFile());
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode root = objectMapper.readTree(artistFile);
            JsonNode artists = root.get("artists");
            List<Artist> artistsToWrite = new ArrayList<>();
            for (JsonNode artist : artists) {
                Artist resultArtist = new Artist();
                resultArtist.setId(artist.get("id").asText());
                resultArtist.setBio(artist.get("bio").asText());
                resultArtist.setName(artist.get("name").asText());
                List<String> genres = new ArrayList<String>();
                for (JsonNode genre : artist.get("genres")) {
                    genres.add(genre.asText());
                }
                resultArtist.setGenres(genres);
                
                artistsToWrite.add(resultArtist);
                System.out.println("\t\tProcessed Artist " + resultArtist.getName());
                if (artistsToWrite.size() == 10) {
                    System.out.println("BATCH WRITING ARTISTS");
                    dataImportMapper.createArtist(artistsToWrite);
                    System.out.println("BATCH WRITING ARTIST GENRES");
                    dataImportMapper.createArtistGenres(artistsToWrite);
                    artistsToWrite.clear();
                }
                
            }
            if (artistsToWrite.size() > 0) {
                System.out.println("BATCH WRITING ARTISTS");
                dataImportMapper.createArtist(artistsToWrite);
                System.out.println("BATCH WRITING ARTIST GENRES");
                dataImportMapper.createArtistGenres(artistsToWrite);
                artistsToWrite.clear();
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void createAlbums(String filename) {
        try {
            File albumFile = new File(getClass().getResource(filename).getFile());
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode root = objectMapper.readTree(albumFile);
            JsonNode albums = root.get("albums");
            List<Album> albumsToWrite = new ArrayList<>();
            for (JsonNode album : albums) {
                Album resultAlbum = new Album();
                resultAlbum.setId(album.get("id").asText());
                resultAlbum.setName(album.get("name").asText());
                List<ArtistIdentifier> artists = new ArrayList<ArtistIdentifier>();
                for (JsonNode artist : album.get("artists")) {
                    // build a dummy artist object with the correct id
                    ArtistIdentifier artistIdentifier = new ArtistIdentifier();
                    artistIdentifier.setId(artist.asText());
                    artists.add(artistIdentifier);
                }
                resultAlbum.setArtists(artists);
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date releaseDate = dateFormat.parse(album.get("release_date").asText());
                resultAlbum.setReleaseDate(releaseDate);
                // save the songs for later
                
                // album object complete, send to DB
                albumsToWrite.add(resultAlbum);
                System.out.println("\t\tProcessed Album " + resultAlbum.getName());
                if (albumsToWrite.size() == 50) {
                    System.out.println("BATCH WRITING ALBUMS");
                    dataImportMapper.createAlbum(albumsToWrite);
                    System.out.println("BATCH WRITING ALBUM ARTISTS");
                    dataImportMapper.createAlbumArtists(albumsToWrite);
                    albumsToWrite.clear();
                }
                
            }
            if (albumsToWrite.size() > 0) {
                    System.out.println("BATCH WRITING ALBUMS");
                    dataImportMapper.createAlbum(albumsToWrite);
                    System.out.println("BATCH WRITING ALBUM ARTISTS");
                    dataImportMapper.createAlbumArtists(albumsToWrite);
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void createSongs(String filename) {
        try {
            File songFile = new File(getClass().getResource(filename).getFile());
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode root = objectMapper.readTree(songFile);
            JsonNode songs = root.get("songs");
            List<Song> songsToWrite = new ArrayList<>();
            for (JsonNode song : songs) {
                Song resultSong = new Song();
                resultSong.setId(song.get("id").asText());
                resultSong.setName(song.get("name").asText());
                resultSong.setDuration(song.get("duration").asInt());
                resultSong.setExplicit(song.get("explicit").asBoolean());
                resultSong.setDiscNumber(song.get("disc_number").asInt());
                resultSong.setTrackNumber(song.get("track_number").asInt());
                resultSong.setLyrics(song.get("lyrics").asText());
                List<ArtistIdentifier> artists = new ArrayList<ArtistIdentifier>();
                for (JsonNode artist : song.get("artists")) {
                    // build a dummy artist object with the correct id
                    ArtistIdentifier artistIdentifier = new ArtistIdentifier();
                    artistIdentifier.setId(artist.asText());
                    artists.add(artistIdentifier);
                }
                resultSong.setArtists(artists);
                // build a dummy album object with the correct id
                AlbumIdentifier albumIdentifier = new AlbumIdentifier();
                albumIdentifier.setId(song.get("album").asText());
                resultSong.setAlbum(albumIdentifier);
                
                // song object complete, send to DB
                System.out.println("\t\tProcessed Song " + resultSong.getName());
                songsToWrite.add(resultSong); 
                if (songsToWrite.size() == 50) {
                    System.out.println("BATCH WRITING SONGS");
                    dataImportMapper.createSong(songsToWrite);
                    System.out.println("BATCH WRITING SONG ALBUM");
                    dataImportMapper.createSongAlbum(songsToWrite);
                    System.out.println("BATCH WRITING SONG ARTISTS");
                    dataImportMapper.createSongArtists(songsToWrite);
                    songsToWrite.clear();
                }
                
            }
            if (songsToWrite.size() > 0) {
                System.out.println("BATCH WRITING SONGS");
                dataImportMapper.createSong(songsToWrite);
                System.out.println("BATCH WRITING SONG ALBUM");
                dataImportMapper.createSongAlbum(songsToWrite);
                System.out.println("BATCH WRITING SONG ARTISTS");
                dataImportMapper.createSongArtists(songsToWrite);
                songsToWrite.clear();
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
}
