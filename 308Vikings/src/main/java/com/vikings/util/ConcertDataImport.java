package com.vikings.util;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vikings.dao.mapper.DataImportMapper;
import com.vikings.domain.Address;
import com.vikings.domain.Album;
import com.vikings.domain.Artist;
import com.vikings.domain.Concert;
import com.vikings.domain.Song;
import com.vikings.domain.Venue;
import com.vikings.domain.identifier.AlbumIdentifier;
import com.vikings.domain.identifier.ArtistIdentifier;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

/**
 * Imports concert data from JSONs
 * to the database.
 * 
 * JSONs generated by python script.
 * Put the JSONs in
 * src/main/resources/com/vikings/util
 */
@Controller
public class ConcertDataImport {
    
    @Autowired
    DataImportMapper dataImportMapper;
    
    // start app and visit this URL to run the import
    @GetMapping("/util/runConcertDataImport")
    public String runDataImport(Model model) {
        createConcerts();
        System.out.println("Done.");
        return "index";
    }
    
    private void createConcerts() {
        try {
            File concertFile = new File(getClass().getResource("concerts.json").getFile());
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode root = objectMapper.readTree(concertFile);
            JsonNode concerts = root.get("concerts");
            Map<String,String> visitedVenues = new HashMap<String,String>();
            for (JsonNode concert : concerts) {
                System.out.println("Got concert " + concert.get("songkickUrl").asText());
                Concert resultConcert = new Concert();
                resultConcert.setId(java.util.UUID.randomUUID().toString());
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date concertDate = dateFormat.parse(concert.get("date").asText());
                resultConcert.setDate(concertDate);
                resultConcert.setTicketingUrl(concert.get("ticketingUrl").asText());
                // make dummy artist objects with IDs
                List<ArtistIdentifier> artists = new ArrayList<ArtistIdentifier>();
                for (JsonNode artist : concert.get("artists")) {
                    ArtistIdentifier artistDummy = new ArtistIdentifier();
                    artistDummy.setId(artist.asText());
                    artists.add(artistDummy);
                } 
                resultConcert.setArtists(artists);
                Venue concertVenue = null;
                // now see if we've searched this venue already...
                if (visitedVenues.containsKey(concert.get("venue").get("name").asText())) {
                    String venueId = visitedVenues.get(concert.get("venue").get("name").asText());
                    concertVenue = new Venue();
                    concertVenue.setId(venueId);
                } else {
                    // if this is a new venue, write the venue to the DB
                    // and add it to the map.
                    Venue newVenue = new Venue();
                    newVenue.setId(java.util.UUID.randomUUID().toString());
                    newVenue.setName(concert.get("venue").get("name").asText());
                    
                    Address address = new Address();
                    address.setStreet(concert.get("venue").get("street").asText());
                    address.setCity(concert.get("venue").get("city").asText());
                    address.setState(concert.get("venue").get("state").asText());
                    address.setZip(concert.get("venue").get("zip").asText());
                    
                    newVenue.setAddress(address);
                    
                    dataImportMapper.createAddress(address);
                    dataImportMapper.createVenue(newVenue);
                    
                    visitedVenues.put(newVenue.getName(), newVenue.getId());
                    
                    concertVenue = newVenue;
                }
                
                resultConcert.setVenue(concertVenue);
                dataImportMapper.createConcert(resultConcert);
                dataImportMapper.createConcertArtists(resultConcert);
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
}
