<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.vikings.dao.mapper.SongMapper">
    <cache />
    
    <resultMap id="songMap" type="com.vikings.domain.Song">
        <id property="id" column="song_id" />
        <result property="name" column="song_name"/>
        <result property="lyrics" column="song_lyrics"/>
        <result property="duration" column="song_duration"/>
        <result property="explicit" column="song_explicit"/>
        <result property="discNumber" column="song_discnumber"/>
        <result property="trackNumber" column="song_tracknumber"/>
        <result property="numPlays" column="song_numplays"/>
        <association property="album" javaType="com.vikings.domain.identifier.AlbumIdentifier">
            <id property="id" column="album_id"/>
            <result property="name" column="album_name"/>
            <collection property="artists" ofType="com.vikings.domain.identifier.ArtistIdentifier">
                <id property="id" column="album_artist_id"/>
                <result property="name" column="album_artist_name"/>
            </collection>
        </association>
        <collection property="artists" ofType="com.vikings.domain.identifier.ArtistIdentifier">
            <id property="id" column="artist_id"/>
            <result property="name" column="artist_name"/>
        </collection>
    </resultMap>

    <resultMap id="playlistSongMap" type="com.vikings.domain.PlaylistSong">
        <id property="id" column="song_id" />
        <result property="name" column="song_name"/>
        <result property="lyrics" column="song_lyrics"/>
        <result property="duration" column="song_duration"/>
        <result property="explicit" column="song_explicit"/>
        <result property="discNumber" column="song_discnumber"/>
        <result property="trackNumber" column="song_tracknumber"/>
        <result property="numPlays" column="song_numplays"/>
        <result property="dateAdded" column="playlist_song_date_added"/>
        <result property="playlistTrackNumber" column="playlist_song_track_number"/>
        <association property="album" javaType="com.vikings.domain.identifier.AlbumIdentifier">
            <id property="id" column="album_id"/>
            <result property="name" column="album_name"/>
        </association>
        <collection property="artists" ofType="com.vikings.domain.identifier.ArtistIdentifier">
            <id property="id" column="artist_id"/>
            <result property="name" column="artist_name"/>
        </collection>
    </resultMap>
    
    <select id="getSong" parameterType="String" resultMap="songMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            s.duration as 'song_duration',
            s.explicit as 'song_explicit',
            s.discNumber as 'song_discnumber',
            s.trackNumber as 'song_tracknumber',
            s.lyrics as 'song_lyrics',
            (SELECT
                COUNT(*)
            FROM
                UserSongsPlayed usp
            WHERE
                usp.songId = s.songId)
            as 'song_numplays',
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            al.albumId as 'album_id',
            al.name as 'album_name',
            a2.artistId as 'album_artist_id',
            a2.name as 'album_artist_name'
        FROM
            Songs s
        LEFT JOIN
            AlbumSongs als
        ON
            als.songId = s.songId
        LEFT JOIN
            SongArtists sa
        ON
            sa.songId = s.songId
        LEFT JOIN
            Artists a
        ON
            a.artistId = sa.artistId
        LEFT JOIN
            Albums al
        ON
            al.albumId = als.albumId
        LEFT JOIN
            AlbumArtists ala
        ON
            ala.albumId = al.albumId
        LEFT JOIN
            Artists a2
        ON
            a2.artistId = ala.artistId
        WHERE
            s.songId = #{id}
    </select>

    <select id="getSongsForAlbum" parameterType="String" resultMap="songMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            s.duration as 'song_duration',
            s.explicit as 'song_explicit',
            s.discNumber as 'song_discnumber',
            s.trackNumber as 'song_tracknumber',
            s.lyrics as 'song_lyrics',
            (SELECT
                COUNT(*)
            FROM
                UserSongsPlayed usp
            WHERE
                usp.songId = s.songId)
            as 'song_numplays',
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            al.albumId as 'album_id',
            al.name as 'album_name',
            a2.artistId as 'album_artist_id',
            a2.name as 'album_artist_name'
        FROM
            AlbumSongs als
        LEFT JOIN
            Songs s
        ON
            als.songId = s.songId
        LEFT JOIN
            SongArtists sa
        ON
            sa.songId = s.songId
        LEFT JOIN
            Artists a
        ON
            a.artistId = sa.artistId
        LEFT JOIN
            Albums al
        ON
            al.albumId = als.albumId
        LEFT JOIN
            AlbumArtists ala
        ON
            ala.albumId = al.albumId
        LEFT JOIN
            Artists a2
        ON
            a2.artistId = ala.artistId
        WHERE
            als.albumId = #{id}
    </select>

    <select id="getSongsForPlaylist" parameterType="String" resultMap="playlistSongMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            s.duration as 'song_duration',
            s.explicit as 'song_explicit',
            s.discNumber as 'song_discnumber',
            s.trackNumber as 'song_tracknumber',
            s.lyrics as 'song_lyrics',
            (SELECT
                COUNT(*)
            FROM
                UserSongsPlayed usp
            WHERE
                usp.songId = s.songId)
            as 'song_numplays',
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            al.albumId as 'album_id',
            al.name as 'album_name',
            ps.dateAdded as 'playlist_song_date_added',
            ps.trackNumber as 'playlist_song_track_number'
        FROM
            PlaylistSongs ps
        LEFT JOIN
            Songs s
        ON
            ps.songId = s.songId
        LEFT JOIN
            SongArtists sa
        ON
            sa.songId = s.songId
        LEFT JOIN
            Artists a
        ON
            a.artistId = sa.artistId
        LEFT JOIN
            AlbumSongs als
        ON
            als.songId = s.songId
        LEFT JOIN
            Albums al
        ON
            al.albumId = als.albumId
        WHERE
            ps.playlistId = #{id}
    </select>

    <select id="getTopSongs" resultMap="songMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            s.duration as 'song_duration',
            s.explicit as 'song_explicit',
            s.discNumber as 'song_discnumber',
            s.trackNumber as 'song_tracknumber',
            s.lyrics as 'song_lyrics',
            (SELECT
                COUNT(*)
            FROM
                UserSongsPlayed usp
            WHERE
                usp.songId = s.songId)
            as 'song_numplays',
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            al.albumId as 'album_id',
            al.name as 'album_name',
            a2.artistId as 'album_artist_id',
            a2.name as 'album_artist_name'
        FROM
            Songs s
        LEFT JOIN
            AlbumSongs als
        ON
            als.songId = s.songId
        LEFT JOIN
            SongArtists sa
        ON
            sa.songId = s.songId
        LEFT JOIN
            Artists a
        ON
            a.artistId = sa.artistId
        LEFT JOIN
            Albums al
        ON
            al.albumId = als.albumId
        LEFT JOIN
            AlbumArtists ala
        ON
            ala.albumId = al.albumId
        LEFT JOIN
            Artists a2
        ON
            a2.artistId = ala.artistId
        WHERE
            (SELECT
                COUNT(*)
            FROM
                UserSongsPlayed usp
            WHERE
                usp.songId = s.songId) > 0
        ORDER BY
            song_numplays
        DESC
    </select>

    <select id="getTopSongsForArtist" parameterType="String" resultMap="songMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            s.duration as 'song_duration',
            s.explicit as 'song_explicit',
            s.discNumber as 'song_discnumber',
            s.trackNumber as 'song_tracknumber',
            s.lyrics as 'song_lyrics',
            (SELECT
                COUNT(*)
            FROM
                UserSongsPlayed usp
            WHERE
                usp.songId = s.songId)
            as 'song_numplays',
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            al.albumId as 'album_id',
            al.name as 'album_name'
        FROM
            SongArtists sa
        LEFT JOIN
            Songs s
        ON
            sa.songId = s.songId
        LEFT JOIN
            Artists a
        ON
            a.artistId = sa.artistId
        LEFT JOIN
            AlbumSongs als
        ON
            als.songId = s.songId
        LEFT JOIN
            Albums al
        ON
            al.albumId = als.albumId
        WHERE
            sa.artistId = #{id}
        ORDER BY
            song_numplays
        DESC

    </select>

    <select id="getArtistSongsForPayment" parameterType="Map" resultMap="songMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            (SELECT
                COUNT(*)
            FROM
                UserSongsPlayed usp
            WHERE
                usp.songId = s.songId
                AND
                usp.datePlayed <![CDATA[>=]]> #{startDate}
                AND
                usp.datePlayed <![CDATA[<=]]> #{endDate}
            )
            as 'song_numplays'
        FROM
            Songs s,
            UserSongsPlayed usp,
            SongArtists sa
        WHERE
            (
                (SELECT
                    COUNT(*)
                FROM
                    UserSongsPlayed usp
                WHERE
                    usp.songId = s.songId
                    AND
                    usp.datePlayed <![CDATA[>=]]> #{startDate}
                    AND
                    usp.datePlayed <![CDATA[<=]]> #{endDate}
                ) > 0
            )
            AND
            (
                sa.artistId = #{id}
                AND
                s.songId = sa.songId
            )
        GROUP BY
            s.songId
    </select>

    <select id="search" parameterType="Map" resultMap="songMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            s.duration as 'song_duration',
            s.explicit as 'song_explicit',
            s.discNumber as 'song_discnumber',
            s.trackNumber as 'song_tracknumber',
            s.lyrics as 'song_lyrics',
            (SELECT
                COUNT(*)
            FROM
                UserSongsPlayed usp
            WHERE
                usp.songId = s.songId)
            as 'song_numplays',
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            al.albumId as 'album_id',
            al.name as 'album_name',
            a2.artistId as 'album_artist_id',
            a2.name as 'album_artist_name'
        FROM
            Songs s,
            AlbumSongs als,
            SongArtists sa,
            Artists a,
            Albums al,
            AlbumArtists ala,
            Artists a2
        WHERE
            (
                s.name LIKE #{query}
                OR
                a.name LIKE #{query}
                OR
                al.name LIKE #{query}
            )
            AND
            (
                sa.songId = s.songId
                AND
                a.artistId = sa.artistId
                AND
                als.songId = s.songId
                AND
                als.albumId = al.albumId
                AND
                ala.albumId = al.albumId
                AND
                a2.artistId = ala.artistId
            )
        GROUP BY
            s.songId
        <if test="limit != null">
            LIMIT
                #{limit}
        </if>
    </select>
    
</mapper>
