<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.vikings.dao.mapper.UserMusicMapper">
    <cache />
    
    <resultMap id="songMap" type="com.vikings.domain.Song">
        <id property="id" column="song_id" />
        <result property="name" column="song_name"/>
        <result property="lyrics" column="song_lyrics"/>
        <result property="duration" column="song_duration"/>
        <result property="explicit" column="song_explicit"/>
        <result property="discNumber" column="song_discnumber"/>
        <result property="trackNumber" column="song_tracknumber"/>
        <result property="numPlays" column="song_numplays"/>
        <association property="album" javaType="com.vikings.domain.identifier.AlbumIdentifier">
            <id property="id" column="album_id"/>
            <result property="name" column="album_name"/>
        </association>
        <collection property="artists" ofType="com.vikings.domain.identifier.ArtistIdentifier">
            <id property="id" column="artist_id"/>
            <result property="name" column="artist_name"/>
        </collection>
    </resultMap>

    <resultMap id="librarySongMap" type="com.vikings.domain.library.LibrarySong">
        <result property="dateAdded" column="song_date_saved"/>
        <association property="song" javaType="com.vikings.domain.Song">
            <id property="id" column="song_id" />
            <result property="name" column="song_name"/>
            <result property="lyrics" column="song_lyrics"/>
            <result property="duration" column="song_duration"/>
            <result property="explicit" column="song_explicit"/>
            <result property="discNumber" column="song_discnumber"/>
            <result property="trackNumber" column="song_tracknumber"/>
            <result property="numPlays" column="song_numplays"/>
            <association property="album" javaType="com.vikings.domain.identifier.AlbumIdentifier">
                <id property="id" column="album_id"/>
                <result property="name" column="album_name"/>
            </association>
            <collection property="artists" ofType="com.vikings.domain.identifier.ArtistIdentifier">
                <id property="id" column="artist_id"/>
                <result property="name" column="artist_name"/>
            </collection>
        </association>
    </resultMap>

    <resultMap id="libraryAlbumMap" type="com.vikings.domain.library.LibraryAlbum">
        <id property="dateAdded" column="album_date_added"/>
        <association property="albumIdentifier" javaType="com.vikings.domain.identifier.AlbumIdentifier">
            <id property="id" column="album_id"/>
            <result property="name" column="album_name"/>
            <collection property="artists" ofType="com.vikings.domain.identifier.ArtistIdentifier">
                <id property="id" column="artist_id"/>
                <result property="name" column="artist_name"/>
            </collection>
        </association>
    </resultMap>

    <resultMap id="libraryArtistMap" type="com.vikings.domain.library.LibraryArtist">
        <id property="dateAdded" column="artist_date_added"/>
        <association property="artistIdentifier" javaType="com.vikings.domain.identifier.ArtistIdentifier">
            <id property="id" column="artist_id"/>
            <result property="name" column="artist_name"/>
        </association>
    </resultMap>

    <resultMap id="libraryPlaylistMap" type="com.vikings.domain.library.LibraryPlaylist">
        <id property="dateAdded" column="playlist_date_added"/>
        <association property="playlistIdentifier" javaType="com.vikings.domain.identifier.PlaylistIdentifier">
            <id property="id" column="playlist_id"/>
            <result property="name" column="playlist_name"/>
            <association property="creator" javaType="com.vikings.domain.identifier.UserIdentifier">
                <id property="id" column="playlist_creator_id"/>
                <result property="name" column="playlist_creator_name"/>
            </association>
        </association>
    </resultMap>

    <resultMap id="albumIdentifierMap" type="com.vikings.domain.identifier.AlbumIdentifier">
        <id property="id" column="album_id"/>
        <result property="name" column="album_name"/>
        <collection property="artists" ofType="com.vikings.domain.identifier.ArtistIdentifier">
            <id property="id" column="artist_id"/>
            <result property="name" column="artist_name"/>
        </collection>
    </resultMap>

    <resultMap id="artistIdentifierMap" type="com.vikings.domain.identifier.ArtistIdentifier">
        <id property="id" column="artist_id"/>
        <result property="name" column="artist_name"/>
    </resultMap>

    <resultMap id="playlistIdentifierMap" type="com.vikings.domain.identifier.PlaylistIdentifier">
        <id property="id" column="playlist_id"/>
        <result property="name" column="playlist_name"/>
        <association property="creator" javaType="com.vikings.domain.identifier.UserIdentifier">
            <id property="id" column="playlist_creator_id"/>
            <result property="name" column="playlist_creator_name"/>
        </association>
    </resultMap>
    
    <select id="getSong" parameterType="String" resultMap="songMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            s.duration as 'song_duration',
            s.explicit as 'song_explicit',
            s.discNumber as 'song_discnumber',
            s.trackNumber as 'song_tracknumber',
            s.lyrics as 'song_lyrics',
            s.numPlays as 'song_numplays',
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            al.albumId as 'album_id',
            al.name as 'album_name'
        FROM
            Songs s
        LEFT JOIN
            AlbumSongs als
        ON
            als.songId = s.songId
        LEFT JOIN
            SongArtists sa
        ON
            sa.songId = s.songId
        LEFT JOIN
            Artists a
        ON
            a.artistId = sa.artistId
        LEFT JOIN
            Albums al
        ON
            al.albumId = als.albumId
        WHERE
            s.songId = #{id}
    </select>

    <insert id="markSongAsPlayedForUser" parameterType="Map">
        INSERT IGNORE INTO
            UserSongsPlayed (
                userId,
                songId,
                datePlayed,
                clickedPlay
            )
        VALUES (
            #{userId},
            #{songId},
            #{datePlayed},
            #{clicked}
        )
    </insert>

    <insert id="saveSong" parameterType="Map">
        INSERT IGNORE INTO
            UserSongsSaved (
                userId,
                songId,
                dateSaved
            )
        VALUES (
            #{userId},
            #{songId},
            #{dateAdded}
        )
    </insert>

    <delete id="unsaveSong" parameterType="Map">
        DELETE FROM
            UserSongsSaved
        WHERE
            userId = #{userId} AND
            songId = #{songId}
    </delete>

    <insert id="saveAlbum" parameterType="Map">
        INSERT IGNORE INTO
            UserAlbumsSaved (
                userId,
                albumId,
                dateSaved
            )
        VALUES (
            #{userId},
            #{albumId},
            #{dateAdded}
        )
    </insert>

    <delete id="unsaveAlbum" parameterType="Map">
        DELETE FROM
            UserAlbumsSaved
        WHERE
            userId = #{userId} AND
            albumId = #{albumId}
    </delete>

    <insert id="followArtist" parameterType="Map">
        INSERT IGNORE INTO
            UserArtistsFollowed (
                userId,
                artistId,
                dateFollowed
            )
        VALUES (
            #{userId},
            #{artistId},
            #{dateAdded}
        )
    </insert>

    <delete id="unfollowArtist" parameterType="Map">
        DELETE FROM
            UserArtistsFollowed
        WHERE
            userId = #{userId} AND
            artistId = #{artistId}
    </delete>

    <insert id="followPlaylist" parameterType="Map">
        INSERT IGNORE INTO
            UserPlaylistsFollowed (
                userId,
                playlistId,
                dateFollowed
            )
        VALUES (
            #{userId},
            #{playlistId},
            #{dateAdded}
        )
    </insert>

    <delete id="unfollowPlaylist" parameterType="Map">
        DELETE FROM
            UserPlaylistsFollowed
        WHERE
            userId = #{userId} AND
            playlistId = #{playlistId}
    </delete>

    <select id="getSavedSongs" parameterType="String" resultMap="librarySongMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            s.duration as 'song_duration',
            s.explicit as 'song_explicit',
            s.discNumber as 'song_discnumber',
            s.trackNumber as 'song_tracknumber',
            s.lyrics as 'song_lyrics',
            s.numPlays as 'song_numplays',
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            al.albumId as 'album_id',
            al.name as 'album_name',
            uss.dateSaved as 'song_date_saved'
        FROM
            UserSongsSaved uss
        LEFT JOIN
            Songs s
        ON
            s.songId = uss.songId
        LEFT JOIN
            AlbumSongs als
        ON
            als.songId = s.songId
        LEFT JOIN
            SongArtists sa
        ON
            sa.songId = s.songId
        LEFT JOIN
            Artists a
        ON
            a.artistId = sa.artistId
        LEFT JOIN
            Albums al
        ON
            al.albumId = als.albumId
        WHERE
            uss.userId = #{id}
        ORDER BY
            uss.dateSaved ASC
    </select>

    <select id="getSavedAlbums" parameterType="String" resultMap="libraryAlbumMap">
        SELECT
            a.albumId as 'album_id',
            a.name as 'album_name',
            ar.artistId as 'artist_id',
            ar.name as 'artist_name',
            uas.dateSaved as 'album_date_added'
        FROM
            UserAlbumsSaved uas
        LEFT JOIN
            Albums a
        ON
            a.albumId = uas.albumId
        LEFT JOIN
            AlbumArtists aa
        ON
            aa.albumId = a.albumId
        LEFT JOIN
            Artists ar
        ON
            ar.artistId = aa.artistId
        WHERE
            uas.userId = #{id}
        ORDER BY
            uas.dateSaved ASC
    </select>

    <select id="getFollowedArtists" parameterType="String" resultMap="libraryArtistMap">
        SELECT
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            uaf.dateFollowed as 'artist_date_added'
        FROM
            UserArtistsFollowed uaf
        LEFT JOIN
            Artists a
        ON
            a.artistId = uaf.artistId
        WHERE
            uaf.userId = #{id}
        ORDER BY
            uaf.dateFollowed ASC
    </select>

    <select id="getFollowedPlaylists" parameterType="String" resultMap="libraryPlaylistMap">
        SELECT
            p.playlistId as 'playlist_id',
            p.name as 'playlist_name',
            u.userId as 'playlist_creator_id',
            u.username as 'playlist_creator_name',
            upf.dateFollowed as 'playlist_date_added'
        FROM
            UserPlaylistsFollowed upf
        LEFT JOIN
            Playlists p
        ON
            p.playlistId = upf.playlistId
        LEFT JOIN
            Users u
        ON
            u.userId = p.creatorId
        WHERE
            upf.userId = #{id}
        ORDER BY
            upf.dateFollowed ASC
    </select>

    <select id="getHistory" parameterType="String" resultMap="songMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            s.duration as 'song_duration',
            s.explicit as 'song_explicit',
            s.discNumber as 'song_discnumber',
            s.trackNumber as 'song_tracknumber',
            s.lyrics as 'song_lyrics',
            s.numPlays as 'song_numplays',
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            al.albumId as 'album_id',
            al.name as 'album_name'
        FROM
            UserSongsPlayed usp
        LEFT JOIN
            Songs s
        ON
            s.songId = usp.songId
        LEFT JOIN
            AlbumSongs als
        ON
            als.songId = s.songId
        LEFT JOIN
            SongArtists sa
        ON
            sa.songId = s.songId
        LEFT JOIN
            Artists a
        ON
            a.artistId = sa.artistId
        LEFT JOIN
            Albums al
        ON
            al.albumId = als.albumId
        WHERE
            usp.userId = #{id}
        ORDER BY
            usp.datePlayed ASC
    </select>

    <select id="getRecentlyPlayed" parameterType="String" resultMap="songMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name',
            s.duration as 'song_duration',
            s.explicit as 'song_explicit',
            s.discNumber as 'song_discnumber',
            s.trackNumber as 'song_tracknumber',
            s.lyrics as 'song_lyrics',
            s.numPlays as 'song_numplays',
            a.artistId as 'artist_id',
            a.name as 'artist_name',
            al.albumId as 'album_id',
            al.name as 'album_name'
        FROM
            UserSongsPlayed usp
        LEFT JOIN
            Songs s
        ON
            s.songId = usp.songId
        LEFT JOIN
            AlbumSongs als
        ON
            als.songId = s.songId
        LEFT JOIN
            SongArtists sa
        ON
            sa.songId = s.songId
        LEFT JOIN
            Artists a
        ON
            a.artistId = sa.artistId
        LEFT JOIN
            Albums al
        ON
            al.albumId = als.albumId
        WHERE
            usp.userId = #{id} AND
            usp.clickedPlay = 1
        ORDER BY
            usp.datePlayed ASC
    </select>
    
</mapper>
