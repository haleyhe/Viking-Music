<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.vikings.dao.mapper.UserMusicMapper">
    <cache />
    
    <resultMap id="songMap" type="com.vikings.domain.Song">
        <id property="id" column="songid" />
        <result property="name" column="name"/>
        <result property="lyrics" column="lyrics"/>
        <result property="duration" column="duration"/>
        <result property="explicit" column="explicit"/>
        <result property="discNumber" column="discnumber"/>
        <result property="trackNumber" column="tracknumber"/>
        <result property="numPlays" column="numplays"/>
        <collection property="artists" ofType="com.vikings.domain.identifier.ArtistIdentifier">
            <id property="id" column="artistid"/>
            <result property="name" column="artistname"/>
        </collection>
    </resultMap>

    <resultMap id="songIdentifierMap" type="com.vikings.domain.identifier.SongIdentifier">
        <id property="id" column="song_id"/>
        <result property="name" column="song_name"/>
    </resultMap>

    <resultMap id="albumIdentifierMap" type="com.vikings.domain.identifier.AlbumIdentifier">
        <id property="id" column="album_id"/>
        <result property="name" column="album_name"/>
    </resultMap>

    <resultMap id="artistIdentifierMap" type="com.vikings.domain.identifier.ArtistIdentifier">
        <id property="id" column="artist_id"/>
        <result property="name" column="artist_name"/>
    </resultMap>
    
    <select id="getSong" parameterType="String" resultMap="songMap">
        SELECT
            s.songId as 'songid',
            s.name as 'name',
            s.duration as 'duration',
            s.explicit as 'explicit',
            s.discNumber as 'discnumber',
            s.trackNumber as 'tracknumber',
            s.lyrics as 'lyrics',
            s.numPlays as 'numplays',
            a.artistId as 'artistid',
            a.name as 'artistname'
        FROM
            Songs s,
            SongArtists sa,
            Artists a
        WHERE
            s.songId = #{id}
            AND
            sa.songId = s.songId
            AND
            a.artistId = sa.artistId
    </select>

    <insert id="markSongAsPlayedForUser" parameterType="Map">
        INSERT IGNORE INTO
            UserSongsPlayed (
                userId,
                songId,
                datePlayed,
                clickedPlay
            )
        VALUES (
            #{userId},
            #{songId},
            #{datePlayed},
            #{clicked}
        )
    </insert>

    <insert id="saveSong" parameterType="Map">
        INSERT IGNORE INTO
            UserSongsSaved (
                userId,
                songId
            )
        VALUES (
            #{userId},
            #{songId}
        )
    </insert>

    <delete id="unsaveSong" parameterType="Map">
        DELETE FROM
            UserSongsSaved
        WHERE
            userId = #{userId} AND
            songId = #{songId}
    </delete>

    <insert id="saveAlbum" parameterType="Map">
        INSERT IGNORE INTO
            UserAlbumsSaved (
                userId,
                albumId
            )
        VALUES (
            #{userId},
            #{albumId}
        )
    </insert>

    <delete id="unsaveAlbum" parameterType="Map">
        DELETE FROM
            UserAlbumsSaved
        WHERE
            userId = #{userId} AND
            albumId = #{albumId}
    </delete>

    <insert id="followArtist" parameterType="Map">
        INSERT IGNORE INTO
            UserArtistsFollowed (
                userId,
                artistId
            )
        VALUES (
            #{userId},
            #{artistId}
        )
    </insert>

    <delete id="unfollowArtist" parameterType="Map">
        DELETE FROM
            UserArtistsFollowed
        WHERE
            userId = #{userId} AND
            artistId = #{artistId}
    </delete>

    <insert id="followPlaylist" parameterType="Map">
        INSERT IGNORE INTO
            UserPlaylistsFollowed (
                userId,
                playlistId
            )
        VALUES (
            #{userId},
            #{playlistId}
        )
    </insert>

    <delete id="unfollowPlaylist" parameterType="Map">
        DELETE FROM
            UserPlaylistsFollowed
        WHERE
            userId = #{userId} AND
            playlistId = #{playlistId}
    </delete>

    <select id="getSavedSongs" parameterType="String" resultMap="songIdentifierMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name'
        FROM
            UserSongsSaved uss
        LEFT JOIN
            Songs s
        ON
            s.songId = uss.songId
        WHERE
            uss.userId = #{id}
    </select>

    <select id="getSavedAlbums" parameterType="String" resultMap="albumIdentifierMap">
        SELECT
            a.albumId as 'album_id',
            a.name as 'album_name'
        FROM
            UserAlbumsSaved uas
        LEFT JOIN
            Albums a
        ON
            a.albumId = uas.albumId
        WHERE
            uas.userId = #{id}
    </select>

    <select id="getFollowedArtists" parameterType="String" resultMap="artistIdentifierMap">
        SELECT
            a.artistId as 'artist_id',
            a.name as 'artist_name'
        FROM
            UserArtistsFollowed uaf
        LEFT JOIN
            Artists a
        ON
            a.artistId = uaf.artistId
        WHERE
            uaf.userId = #{id}
    </select>

    <select id="getHistory" parameterType="String" resultMap="songIdentifierMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name'
        FROM
            UserSongsPlayed usp
        LEFT JOIN
            Songs s
        ON
            s.songId = usp.songId
        WHERE
            usp.userId = #{id}
    </select>

    <select id="getRecentlyPlayed" parameterType="String" resultMap="songIdentifierMap">
        SELECT
            s.songId as 'song_id',
            s.name as 'song_name'
        FROM
            UserSongsPlayed usp
        LEFT JOIN
            Songs s
        ON
            s.songId = usp.songId
        WHERE
            usp.userId = #{id} AND
            usp.clickedPlay = 1
    </select>
    
</mapper>
